// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using semao0_blog.Models;

#nullable disable

namespace semao0_blog.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250313082333_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("semao0_blog.Models.Comment", b =>
                {
                    b.Property<int>("ComId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ComId"));

                    b.Property<string>("ComContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ComCreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ComId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("semao0_blog.Models.Emoji", b =>
                {
                    b.Property<int>("EmojiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmojiId"));

                    b.Property<string>("EmojiCode")
                        .HasColumnType("text");

                    b.Property<string>("EmojiName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmojiUrl")
                        .HasColumnType("text");

                    b.HasKey("EmojiId");

                    b.ToTable("Emojis");
                });

            modelBuilder.Entity("semao0_blog.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PostId"));

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("semao0_blog.Models.PostImg", b =>
                {
                    b.Property<int>("PostImgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PostImgId"));

                    b.Property<int?>("ComId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ImgDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PostId")
                        .HasColumnType("integer");

                    b.HasKey("PostImgId");

                    b.HasIndex("ComId");

                    b.HasIndex("PostId");

                    b.ToTable("PostImgs");
                });

            modelBuilder.Entity("semao0_blog.Models.Reaction", b =>
                {
                    b.Property<int>("ReactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReactId"));

                    b.Property<int?>("ComId")
                        .HasColumnType("integer");

                    b.Property<int>("EmojiId")
                        .HasColumnType("integer");

                    b.Property<int?>("PostId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ReactId");

                    b.HasIndex("ComId");

                    b.HasIndex("EmojiId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("semao0_blog.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleDesc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("semao0_blog.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("UserAvatar")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("UserEmailConf")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserPasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("semao0_blog.Models.Comment", b =>
                {
                    b.HasOne("semao0_blog.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semao0_blog.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("semao0_blog.Models.Post", b =>
                {
                    b.HasOne("semao0_blog.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("semao0_blog.Models.PostImg", b =>
                {
                    b.HasOne("semao0_blog.Models.Comment", "Comment")
                        .WithMany("PostImgs")
                        .HasForeignKey("ComId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("semao0_blog.Models.Post", "Post")
                        .WithMany("PostImgs")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Comment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("semao0_blog.Models.Reaction", b =>
                {
                    b.HasOne("semao0_blog.Models.Comment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("ComId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("semao0_blog.Models.Emoji", "Emoji")
                        .WithMany("Reactions")
                        .HasForeignKey("EmojiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semao0_blog.Models.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("semao0_blog.Models.User", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Emoji");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("semao0_blog.Models.User", b =>
                {
                    b.HasOne("semao0_blog.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("semao0_blog.Models.Comment", b =>
                {
                    b.Navigation("PostImgs");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("semao0_blog.Models.Emoji", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("semao0_blog.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostImgs");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("semao0_blog.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("semao0_blog.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
